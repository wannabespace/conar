/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as publicAuthRouteImport } from './routes/(public)/_auth'
import { Route as protectedProtectedRouteImport } from './routes/(protected)/_protected'
import { Route as protectedProtectedIndexRouteImport } from './routes/(protected)/_protected/index'
import { Route as publicAuthTwoFactorRouteImport } from './routes/(public)/_auth/two-factor'
import { Route as publicAuthSignUpRouteImport } from './routes/(public)/_auth/sign-up'
import { Route as publicAuthSignInRouteImport } from './routes/(public)/_auth/sign-in'
import { Route as protectedProtectedCreateRouteImport } from './routes/(protected)/_protected/create'
import { Route as publicAuthTwoFactorSetupRouteImport } from './routes/(public)/_auth/two-factor.setup'
import { Route as protectedProtectedDatabaseIdRouteImport } from './routes/(protected)/_protected/database/$id'
import { Route as protectedProtectedDatabaseIdTableIndexRouteImport } from './routes/(protected)/_protected/database/$id/table/index'
import { Route as protectedProtectedDatabaseIdSqlIndexRouteImport } from './routes/(protected)/_protected/database/$id/sql/index'
import { Route as protectedProtectedDatabaseIdEnumsIndexRouteImport } from './routes/(protected)/_protected/database/$id/enums/index'

const publicRouteImport = createFileRoute('/(public)')()
const protectedRouteImport = createFileRoute('/(protected)')()

const publicRoute = publicRouteImport.update({
  id: '/(public)',
  getParentRoute: () => rootRouteImport,
} as any)
const protectedRoute = protectedRouteImport.update({
  id: '/(protected)',
  getParentRoute: () => rootRouteImport,
} as any)
const publicAuthRoute = publicAuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => publicRoute,
} as any)
const protectedProtectedRoute = protectedProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => protectedRoute,
} as any)
const protectedProtectedIndexRoute = protectedProtectedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => protectedProtectedRoute,
} as any)
const publicAuthTwoFactorRoute = publicAuthTwoFactorRouteImport.update({
  id: '/two-factor',
  path: '/two-factor',
  getParentRoute: () => publicAuthRoute,
} as any)
const publicAuthSignUpRoute = publicAuthSignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => publicAuthRoute,
} as any)
const publicAuthSignInRoute = publicAuthSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => publicAuthRoute,
} as any)
const protectedProtectedCreateRoute =
  protectedProtectedCreateRouteImport.update({
    id: '/create',
    path: '/create',
    getParentRoute: () => protectedProtectedRoute,
  } as any)
const publicAuthTwoFactorSetupRoute =
  publicAuthTwoFactorSetupRouteImport.update({
    id: '/setup',
    path: '/setup',
    getParentRoute: () => publicAuthTwoFactorRoute,
  } as any)
const protectedProtectedDatabaseIdRoute =
  protectedProtectedDatabaseIdRouteImport.update({
    id: '/database/$id',
    path: '/database/$id',
    getParentRoute: () => protectedProtectedRoute,
  } as any)
const protectedProtectedDatabaseIdTableIndexRoute =
  protectedProtectedDatabaseIdTableIndexRouteImport.update({
    id: '/table/',
    path: '/table/',
    getParentRoute: () => protectedProtectedDatabaseIdRoute,
  } as any)
const protectedProtectedDatabaseIdSqlIndexRoute =
  protectedProtectedDatabaseIdSqlIndexRouteImport.update({
    id: '/sql/',
    path: '/sql/',
    getParentRoute: () => protectedProtectedDatabaseIdRoute,
  } as any)
const protectedProtectedDatabaseIdEnumsIndexRoute =
  protectedProtectedDatabaseIdEnumsIndexRouteImport.update({
    id: '/enums/',
    path: '/enums/',
    getParentRoute: () => protectedProtectedDatabaseIdRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof protectedProtectedIndexRoute
  '/create': typeof protectedProtectedCreateRoute
  '/sign-in': typeof publicAuthSignInRoute
  '/sign-up': typeof publicAuthSignUpRoute
  '/two-factor': typeof publicAuthTwoFactorRouteWithChildren
  '/database/$id': typeof protectedProtectedDatabaseIdRouteWithChildren
  '/two-factor/setup': typeof publicAuthTwoFactorSetupRoute
  '/database/$id/enums': typeof protectedProtectedDatabaseIdEnumsIndexRoute
  '/database/$id/sql': typeof protectedProtectedDatabaseIdSqlIndexRoute
  '/database/$id/table': typeof protectedProtectedDatabaseIdTableIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof protectedProtectedIndexRoute
  '/create': typeof protectedProtectedCreateRoute
  '/sign-in': typeof publicAuthSignInRoute
  '/sign-up': typeof publicAuthSignUpRoute
  '/two-factor': typeof publicAuthTwoFactorRouteWithChildren
  '/database/$id': typeof protectedProtectedDatabaseIdRouteWithChildren
  '/two-factor/setup': typeof publicAuthTwoFactorSetupRoute
  '/database/$id/enums': typeof protectedProtectedDatabaseIdEnumsIndexRoute
  '/database/$id/sql': typeof protectedProtectedDatabaseIdSqlIndexRoute
  '/database/$id/table': typeof protectedProtectedDatabaseIdTableIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(protected)': typeof protectedRouteWithChildren
  '/(protected)/_protected': typeof protectedProtectedRouteWithChildren
  '/(public)': typeof publicRouteWithChildren
  '/(public)/_auth': typeof publicAuthRouteWithChildren
  '/(protected)/_protected/create': typeof protectedProtectedCreateRoute
  '/(public)/_auth/sign-in': typeof publicAuthSignInRoute
  '/(public)/_auth/sign-up': typeof publicAuthSignUpRoute
  '/(public)/_auth/two-factor': typeof publicAuthTwoFactorRouteWithChildren
  '/(protected)/_protected/': typeof protectedProtectedIndexRoute
  '/(protected)/_protected/database/$id': typeof protectedProtectedDatabaseIdRouteWithChildren
  '/(public)/_auth/two-factor/setup': typeof publicAuthTwoFactorSetupRoute
  '/(protected)/_protected/database/$id/enums/': typeof protectedProtectedDatabaseIdEnumsIndexRoute
  '/(protected)/_protected/database/$id/sql/': typeof protectedProtectedDatabaseIdSqlIndexRoute
  '/(protected)/_protected/database/$id/table/': typeof protectedProtectedDatabaseIdTableIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/create'
    | '/sign-in'
    | '/sign-up'
    | '/two-factor'
    | '/database/$id'
    | '/two-factor/setup'
    | '/database/$id/enums'
    | '/database/$id/sql'
    | '/database/$id/table'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/create'
    | '/sign-in'
    | '/sign-up'
    | '/two-factor'
    | '/database/$id'
    | '/two-factor/setup'
    | '/database/$id/enums'
    | '/database/$id/sql'
    | '/database/$id/table'
  id:
    | '__root__'
    | '/(protected)'
    | '/(protected)/_protected'
    | '/(public)'
    | '/(public)/_auth'
    | '/(protected)/_protected/create'
    | '/(public)/_auth/sign-in'
    | '/(public)/_auth/sign-up'
    | '/(public)/_auth/two-factor'
    | '/(protected)/_protected/'
    | '/(protected)/_protected/database/$id'
    | '/(public)/_auth/two-factor/setup'
    | '/(protected)/_protected/database/$id/enums/'
    | '/(protected)/_protected/database/$id/sql/'
    | '/(protected)/_protected/database/$id/table/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  protectedRoute: typeof protectedRouteWithChildren
  publicRoute: typeof publicRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(public)': {
      id: '/(public)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(protected)': {
      id: '/(protected)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(public)/_auth': {
      id: '/(public)/_auth'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicAuthRouteImport
      parentRoute: typeof publicRoute
    }
    '/(protected)/_protected': {
      id: '/(protected)/_protected'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedProtectedRouteImport
      parentRoute: typeof protectedRoute
    }
    '/(protected)/_protected/': {
      id: '/(protected)/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedProtectedIndexRouteImport
      parentRoute: typeof protectedProtectedRoute
    }
    '/(public)/_auth/two-factor': {
      id: '/(public)/_auth/two-factor'
      path: '/two-factor'
      fullPath: '/two-factor'
      preLoaderRoute: typeof publicAuthTwoFactorRouteImport
      parentRoute: typeof publicAuthRoute
    }
    '/(public)/_auth/sign-up': {
      id: '/(public)/_auth/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof publicAuthSignUpRouteImport
      parentRoute: typeof publicAuthRoute
    }
    '/(public)/_auth/sign-in': {
      id: '/(public)/_auth/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof publicAuthSignInRouteImport
      parentRoute: typeof publicAuthRoute
    }
    '/(protected)/_protected/create': {
      id: '/(protected)/_protected/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof protectedProtectedCreateRouteImport
      parentRoute: typeof protectedProtectedRoute
    }
    '/(public)/_auth/two-factor/setup': {
      id: '/(public)/_auth/two-factor/setup'
      path: '/setup'
      fullPath: '/two-factor/setup'
      preLoaderRoute: typeof publicAuthTwoFactorSetupRouteImport
      parentRoute: typeof publicAuthTwoFactorRoute
    }
    '/(protected)/_protected/database/$id': {
      id: '/(protected)/_protected/database/$id'
      path: '/database/$id'
      fullPath: '/database/$id'
      preLoaderRoute: typeof protectedProtectedDatabaseIdRouteImport
      parentRoute: typeof protectedProtectedRoute
    }
    '/(protected)/_protected/database/$id/table/': {
      id: '/(protected)/_protected/database/$id/table/'
      path: '/table'
      fullPath: '/database/$id/table'
      preLoaderRoute: typeof protectedProtectedDatabaseIdTableIndexRouteImport
      parentRoute: typeof protectedProtectedDatabaseIdRoute
    }
    '/(protected)/_protected/database/$id/sql/': {
      id: '/(protected)/_protected/database/$id/sql/'
      path: '/sql'
      fullPath: '/database/$id/sql'
      preLoaderRoute: typeof protectedProtectedDatabaseIdSqlIndexRouteImport
      parentRoute: typeof protectedProtectedDatabaseIdRoute
    }
    '/(protected)/_protected/database/$id/enums/': {
      id: '/(protected)/_protected/database/$id/enums/'
      path: '/enums'
      fullPath: '/database/$id/enums'
      preLoaderRoute: typeof protectedProtectedDatabaseIdEnumsIndexRouteImport
      parentRoute: typeof protectedProtectedDatabaseIdRoute
    }
  }
}

interface protectedProtectedDatabaseIdRouteChildren {
  protectedProtectedDatabaseIdEnumsIndexRoute: typeof protectedProtectedDatabaseIdEnumsIndexRoute
  protectedProtectedDatabaseIdSqlIndexRoute: typeof protectedProtectedDatabaseIdSqlIndexRoute
  protectedProtectedDatabaseIdTableIndexRoute: typeof protectedProtectedDatabaseIdTableIndexRoute
}

const protectedProtectedDatabaseIdRouteChildren: protectedProtectedDatabaseIdRouteChildren =
  {
    protectedProtectedDatabaseIdEnumsIndexRoute:
      protectedProtectedDatabaseIdEnumsIndexRoute,
    protectedProtectedDatabaseIdSqlIndexRoute:
      protectedProtectedDatabaseIdSqlIndexRoute,
    protectedProtectedDatabaseIdTableIndexRoute:
      protectedProtectedDatabaseIdTableIndexRoute,
  }

const protectedProtectedDatabaseIdRouteWithChildren =
  protectedProtectedDatabaseIdRoute._addFileChildren(
    protectedProtectedDatabaseIdRouteChildren,
  )

interface protectedProtectedRouteChildren {
  protectedProtectedCreateRoute: typeof protectedProtectedCreateRoute
  protectedProtectedIndexRoute: typeof protectedProtectedIndexRoute
  protectedProtectedDatabaseIdRoute: typeof protectedProtectedDatabaseIdRouteWithChildren
}

const protectedProtectedRouteChildren: protectedProtectedRouteChildren = {
  protectedProtectedCreateRoute: protectedProtectedCreateRoute,
  protectedProtectedIndexRoute: protectedProtectedIndexRoute,
  protectedProtectedDatabaseIdRoute:
    protectedProtectedDatabaseIdRouteWithChildren,
}

const protectedProtectedRouteWithChildren =
  protectedProtectedRoute._addFileChildren(protectedProtectedRouteChildren)

interface protectedRouteChildren {
  protectedProtectedRoute: typeof protectedProtectedRouteWithChildren
}

const protectedRouteChildren: protectedRouteChildren = {
  protectedProtectedRoute: protectedProtectedRouteWithChildren,
}

const protectedRouteWithChildren = protectedRoute._addFileChildren(
  protectedRouteChildren,
)

interface publicAuthTwoFactorRouteChildren {
  publicAuthTwoFactorSetupRoute: typeof publicAuthTwoFactorSetupRoute
}

const publicAuthTwoFactorRouteChildren: publicAuthTwoFactorRouteChildren = {
  publicAuthTwoFactorSetupRoute: publicAuthTwoFactorSetupRoute,
}

const publicAuthTwoFactorRouteWithChildren =
  publicAuthTwoFactorRoute._addFileChildren(publicAuthTwoFactorRouteChildren)

interface publicAuthRouteChildren {
  publicAuthSignInRoute: typeof publicAuthSignInRoute
  publicAuthSignUpRoute: typeof publicAuthSignUpRoute
  publicAuthTwoFactorRoute: typeof publicAuthTwoFactorRouteWithChildren
}

const publicAuthRouteChildren: publicAuthRouteChildren = {
  publicAuthSignInRoute: publicAuthSignInRoute,
  publicAuthSignUpRoute: publicAuthSignUpRoute,
  publicAuthTwoFactorRoute: publicAuthTwoFactorRouteWithChildren,
}

const publicAuthRouteWithChildren = publicAuthRoute._addFileChildren(
  publicAuthRouteChildren,
)

interface publicRouteChildren {
  publicAuthRoute: typeof publicAuthRouteWithChildren
}

const publicRouteChildren: publicRouteChildren = {
  publicAuthRoute: publicAuthRouteWithChildren,
}

const publicRouteWithChildren =
  publicRoute._addFileChildren(publicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  protectedRoute: protectedRouteWithChildren,
  publicRoute: publicRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
