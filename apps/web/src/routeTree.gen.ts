/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ResetPasswordRouteImport } from './routes/reset-password'
import { Route as OpenRouteImport } from './routes/open'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as LayoutIndexRouteImport } from './routes/_layout/index'
import { Route as LayoutTermsOfServiceRouteImport } from './routes/_layout/terms-of-service'
import { Route as LayoutPrivacyPolicyRouteImport } from './routes/_layout/privacy-policy'
import { Route as LayoutDownloadRouteImport } from './routes/_layout/download'

const ResetPasswordRoute = ResetPasswordRouteImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => rootRouteImport,
} as any)
const OpenRoute = OpenRouteImport.update({
  id: '/open',
  path: '/open',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutIndexRoute = LayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutTermsOfServiceRoute = LayoutTermsOfServiceRouteImport.update({
  id: '/terms-of-service',
  path: '/terms-of-service',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutPrivacyPolicyRoute = LayoutPrivacyPolicyRouteImport.update({
  id: '/privacy-policy',
  path: '/privacy-policy',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutDownloadRoute = LayoutDownloadRouteImport.update({
  id: '/download',
  path: '/download',
  getParentRoute: () => LayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/open': typeof OpenRoute
  '/reset-password': typeof ResetPasswordRoute
  '/download': typeof LayoutDownloadRoute
  '/privacy-policy': typeof LayoutPrivacyPolicyRoute
  '/terms-of-service': typeof LayoutTermsOfServiceRoute
  '/': typeof LayoutIndexRoute
}
export interface FileRoutesByTo {
  '/open': typeof OpenRoute
  '/reset-password': typeof ResetPasswordRoute
  '/download': typeof LayoutDownloadRoute
  '/privacy-policy': typeof LayoutPrivacyPolicyRoute
  '/terms-of-service': typeof LayoutTermsOfServiceRoute
  '/': typeof LayoutIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_layout': typeof LayoutRouteWithChildren
  '/open': typeof OpenRoute
  '/reset-password': typeof ResetPasswordRoute
  '/_layout/download': typeof LayoutDownloadRoute
  '/_layout/privacy-policy': typeof LayoutPrivacyPolicyRoute
  '/_layout/terms-of-service': typeof LayoutTermsOfServiceRoute
  '/_layout/': typeof LayoutIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/open'
    | '/reset-password'
    | '/download'
    | '/privacy-policy'
    | '/terms-of-service'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/open'
    | '/reset-password'
    | '/download'
    | '/privacy-policy'
    | '/terms-of-service'
    | '/'
  id:
    | '__root__'
    | '/_layout'
    | '/open'
    | '/reset-password'
    | '/_layout/download'
    | '/_layout/privacy-policy'
    | '/_layout/terms-of-service'
    | '/_layout/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  OpenRoute: typeof OpenRoute
  ResetPasswordRoute: typeof ResetPasswordRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/reset-password': {
      id: '/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof ResetPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/open': {
      id: '/open'
      path: '/open'
      fullPath: '/open'
      preLoaderRoute: typeof OpenRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/terms-of-service': {
      id: '/_layout/terms-of-service'
      path: '/terms-of-service'
      fullPath: '/terms-of-service'
      preLoaderRoute: typeof LayoutTermsOfServiceRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/privacy-policy': {
      id: '/_layout/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof LayoutPrivacyPolicyRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/download': {
      id: '/_layout/download'
      path: '/download'
      fullPath: '/download'
      preLoaderRoute: typeof LayoutDownloadRouteImport
      parentRoute: typeof LayoutRoute
    }
  }
}

interface LayoutRouteChildren {
  LayoutDownloadRoute: typeof LayoutDownloadRoute
  LayoutPrivacyPolicyRoute: typeof LayoutPrivacyPolicyRoute
  LayoutTermsOfServiceRoute: typeof LayoutTermsOfServiceRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutDownloadRoute: LayoutDownloadRoute,
  LayoutPrivacyPolicyRoute: LayoutPrivacyPolicyRoute,
  LayoutTermsOfServiceRoute: LayoutTermsOfServiceRoute,
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  OpenRoute: OpenRoute,
  ResetPasswordRoute: ResetPasswordRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
