import { boolean, integer, pgSchema, text } from 'drizzle-orm/pg-core'

export const informationSchema = pgSchema('information_schema')

export const tables = informationSchema.table('tables', {
  table_catalog: text().notNull(),
  table_schema: text().notNull(),
  table_name: text().notNull(),
  table_type: text().notNull().$type<'BASE TABLE' | 'VIEW'>().notNull(),
  self_referencing_column_name: text(),
  reference_generation: text().notNull(),
  user_defined_type_catalog: text(),
  user_defined_type_schema: text(),
  user_defined_type_name: text(),
  is_insertable_into: boolean().notNull(),
  is_typed: boolean().notNull(),
  commit_action: text().notNull(),
})

export const columns = informationSchema.table('columns', {
  table_catalog: text().notNull(),
  table_schema: text().notNull(),
  table_name: text().notNull(),
  column_name: text().notNull(),
  ordinal_position: integer(),
  column_default: text(),
  is_nullable: text().notNull().$type<'YES' | 'NO'>(),
  data_type: text().notNull(),
  character_maximum_length: integer(),
  character_octet_length: integer(),
  numeric_precision: integer(),
  numeric_scale: integer(),
  datetime_precision: integer(),
  interval_type: text(),
  interval_precision: integer(),
  character_set_catalog: text(),
  character_set_schema: text(),
  character_set_name: text(),
  collation_catalog: text(),
  collation_schema: text(),
  collation_name: text(),
  domain_catalog: text(),
  domain_schema: text(),
  domain_name: text(),
  udt_catalog: text().notNull(),
  udt_schema: text().notNull(),
  udt_name: text().notNull(),
  scope_catalog: text(),
  scope_schema: text(),
  scope_name: text(),
  maximum_cardinality: integer(),
  dtd_identifier: text().notNull(),
  is_self_referencing: text().notNull().$type<'YES' | 'NO'>(),
  is_identity: text().notNull().$type<'YES' | 'NO'>(),
  identity_generation: text(),
  identity_start: integer(),
  identity_increment: integer(),
  identity_maximum: integer(),
  identity_minimum: integer(),
  identity_cycle: text().notNull().$type<'YES' | 'NO'>(),
  is_generated: text(),
  generation_expression: text(),
  is_updatable: text().notNull().$type<'YES' | 'NO'>(),
})

export const constraints = informationSchema.table('table_constraints', {
  constraint_catalog: text().notNull(),
  constraint_schema: text().notNull(),
  constraint_name: text().notNull(),
  table_catalog: text().notNull(),
  table_schema: text().notNull(),
  table_name: text().notNull(),
  constraint_type: text().$type<'PRIMARY KEY' | 'UNIQUE' | 'FOREIGN KEY' | 'CHECK' | 'EXCLUSION'>().notNull(),
  is_deferrable: text().notNull().$type<'YES' | 'NO'>(),
  initially_deferred: text().notNull().$type<'YES' | 'NO'>(),
  enforced: text().notNull().$type<'YES' | 'NO'>(),
  nulls_distinct: text().$type<'YES' | 'NO'>(),
})

export const constraintColumnUsage = informationSchema.table('constraint_column_usage', {
  table_catalog: text().notNull(),
  table_schema: text().notNull(),
  table_name: text().notNull(),
  column_name: text().notNull(),
  constraint_catalog: text().notNull(),
  constraint_schema: text().notNull(),
  constraint_name: text().notNull(),
})

export const keyColumnUsage = informationSchema.table('key_column_usage', {
  constraint_catalog: text().notNull(),
  constraint_schema: text().notNull(),
  constraint_name: text().notNull(),
  table_catalog: text().notNull(),
  table_schema: text().notNull(),
  table_name: text().notNull(),
  column_name: text().notNull(),
  ordinal_position: integer().notNull(),
  position_in_unique_constraint: integer(),
})
